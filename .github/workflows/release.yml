name: Release

on:
  push:
    tags: '*'

env:
  OGDF_VERSION: dogwood-202202

jobs:
  create_release:
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      git_tag: ${{ steps.get-git-tag.outputs.name }}
    steps:
      - name: Get Git tag
        id: get-git-tag
        run: |
          GIT_REF=${{ github.ref }}
          echo "::set-output name=name::${GIT_REF#refs/*/}"

      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-git-tag.outputs.name }}
          release_name: LOOT v${{ steps.get-git-tag.outputs.name }}
          draft: true
          body: |
            The win64 build requires a 64-bit version of Windows 10 (1809) or later and the [MSVC 2019 x64 redistributable](https://aka.ms/vs/16/release/vc_redist.x64.exe). Users are recommended to run this build if their PC meets the Windows version requirement.

            The win32 build requires Windows 7 or later, the [MSVC 2010 x86 redistributable](https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2010-vc-100-sp1-no-longer-supported) and the [MSVC 2019 x86 redistributable](https://aka.ms/vs/16/release/vc_redist.x86.exe). This build is provided for those who cannot run the win64 build.

            The `.exe` installers will automatically download and install the appropriate redistributable if you don't already have it installed.

            [7-Zip](https://www.7-zip.org/) is required to extract the `.7z` archives.

            The list of changes can be found [here](https://loot.readthedocs.io/en/latest/app/changelog.html).

  windows:
    runs-on: windows-2019
    needs: create_release

    strategy:
      matrix:
        platform: [Win32, x64]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Get Boost metadata
        id: boost-metadata
        run: |
          if ("${{ matrix.platform }}" -eq "Win32") {
            $addressModel = 32
          } else {
            $addressModel = 64
          }

          echo "::set-output name=address-model::$addressModel"
          echo "::set-output name=root::${{ github.workspace }}/boost_1_77_0"
          echo "::set-output name=librarydir::${{ github.workspace }}/boost_1_77_0/stage/$addressModel/lib"

      - name: Set OGDF install path
        shell: bash
        run: echo "OGDF_INSTALL_PATH=${{ github.workspace }}/ogdf-${{ env.OGDF_VERSION }}-install" >> $GITHUB_ENV

      - name: Boost cache
        id: boost-cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.boost-metadata.outputs.root }}/boost
            ${{ steps.boost-metadata.outputs.root }}/stage
          key: ${{ runner.os }}-${{ matrix.platform }}-Boost-1.77.0

      - name: OGDF cache
        id: ogdf-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.OGDF_INSTALL_PATH }}
          key: ${{ runner.os }}-${{ matrix.platform }}-ogdf-${{ env.OGDF_VERSION }}

      - name: Download and extract svg_to_ico
        run: |
          curl -sfSLO 'https://github.com/Ortham/svg_to_ico/releases/download/1.1.0/svg_to_ico.7z'
          7z e -y svg_to_ico.7z

      - name: Generate ICO file
        run: .\svg_to_ico.exe -i resources\icons\loot.svg -o build\icon\icon.ico

      - name: Download & build Boost
        run: |
          curl -sSfLO https://raw.githubusercontent.com/Ortham/ci-scripts/2.1.2/install_boost.py
          python install_boost.py --directory ${{ github.workspace }} --boost-version 1.77.0 -a ${{ steps.boost-metadata.outputs.address-model }} locale system
        if: steps.boost-cache.outputs.cache-hit != 'true'

      - name: Download and build OGDF
        run: |
          curl -sSfLO https://github.com/ogdf/ogdf/archive/refs/tags/${env:OGDF_VERSION}.zip
          Expand-Archive -Path "${env:OGDF_VERSION}.zip" -DestinationPath .

          mkdir ogdf-${env:OGDF_VERSION}/build
          cd ogdf-${env:OGDF_VERSION}/build
          cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.platform }} -DCMAKE_INSTALL_PREFIX="${env:OGDF_INSTALL_PATH}"
          cmake --build . --config Release
          cmake --install . --config Release
        if: steps.ogdf-cache.outputs.cache-hit != 'true'

      - name: Download Qt
        id: qt-metadata
        run: |
          python -m pip install aqtinstall

          if ("${{ matrix.platform }}" -eq "Win32") {
            $qtVersion = "5.15.2"
            $qtArch = "win32_msvc2019"
            $qtArchDir = "msvc2019"
            $qtCMakeVarName = "Qt5_ROOT"

            aqt install-tool windows desktop tools_openssl_x86
          } else {
            $qtVersion = "6.4.0"
            $qtArch = "win64_msvc2019_64"
            $qtArchDir = "msvc2019_64"
            $qtCMakeVarName = "Qt6_ROOT"
          }

          aqt install-qt windows desktop $qtVersion $qtArch
          echo "::set-output name=root::${{ github.workspace }}/$qtVersion/$qtArchDir"
          echo "::set-output name=cmake-var-name::$qtCMakeVarName"

      - name: Run CMake
        run: |
          cd build
          cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.platform }} -DBOOST_ROOT="${{ steps.boost-metadata.outputs.root }}" -DBOOST_LIBRARYDIR="${{ steps.boost-metadata.outputs.librarydir }}" -D${{ steps.qt-metadata.outputs.cmake-var-name }}="${{ steps.qt-metadata.outputs.root }}" -DOGDF_ROOT="${{ env.OGDF_INSTALL_PATH }}"
          cmake --build . --config Release


      - name: Install packages for building docs
        run: |
          python -m pip install -r docs/requirements.txt

      - name: Build docs
        run: sphinx-build -b html docs build\docs\html

      - name: Build translation message object files
        run: python scripts/po_to_mo.py

      - name: Get descriptive LOOT version
        id: get-loot-version
        shell: bash
        run: |
          GIT_DESCRIBE=$(git describe --tags --long --abbrev=7)
          GIT_REF=${{ github.ref }}
          LOOT_DESC_REF=${GIT_DESCRIBE}_${GIT_REF#refs/*/}
          LOOT_SAFE_DESC_REF=${LOOT_DESC_REF//[\/<>\"|]/_}
          echo "::set-output name=version::$LOOT_SAFE_DESC_REF"

      - name: Get LOOT artifact basename
        id: get-artifact-basename
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "Win32" ]]
          then
            PLATFORM=win32
          else
            PLATFORM=win64
          fi
          echo "::set-output name=basename::loot_${{ needs.create_release.outputs.git_tag }}-${PLATFORM}"

      - name: Build archive
        run: |
          $env:PATH="${{ steps.qt-metadata.outputs.root }}/bin;$env:PATH"
          python scripts\archive.py . ${{ needs.create_release.outputs.git_tag }}
          mv "build\loot_${{ steps.get-loot-version.outputs.version }}.7z" "build\${{ steps.get-artifact-basename.outputs.basename }}.7z"

      - name: Build installer
        run: |
          if ("${{ matrix.platform }}" -eq "Win32") {
            scripts\build_installer.ps1 -QtVersion 5
          } else {
            scripts\build_installer.ps1 -QtVersion 6 -LOOTIs64Bit
          }

          mv "build\LOOT Installer.exe" "build\${{ steps.get-artifact-basename.outputs.basename }}.exe"

      - name: Upload Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build\${{ steps.get-artifact-basename.outputs.basename }}.7z
          asset_name: ${{ steps.get-artifact-basename.outputs.basename }}.7z
          asset_content_type: application/x-7z-compressed

      - name: Upload Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build\${{ steps.get-artifact-basename.outputs.basename }}.exe
          asset_name: ${{ steps.get-artifact-basename.outputs.basename }}.exe
          asset_content_type: application/octet-stream
